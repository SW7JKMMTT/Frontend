import { Component, Input, Injector, Optional, ElementRef, ViewChild } from '@angular/core';
import { APIServices }   from '../Services/api.services';
import { Observable }    from 'rxjs/Observable';

var Lealflet = require('leaflet');
declare var L: any;

@Component({
    moduleId: module.id.replace("/dist/", "/"),
    selector: 'map',
    providers: [ APIServices ],
    templateUrl: 'map.component.html',
    styleUrls: [ 'map.component.css' ]
})

export class MapComponent {
    constructor(private APIServices : APIServices){}

    data = [[57.01231, 9.992], [57.01232, 9.992], [57.01232, 9.99202], [57.01232, 9.99241], [57.01231, 9.99276], [57.01231, 9.99307], [57.0123, 9.9934], [57.0123, 9.99367], [57.01229, 9.99384], [57.0123, 9.99395], [57.01231, 9.99409], [57.01235, 9.9944], [57.01235, 9.9944], [57.01262, 9.99432], [57.01276, 9.99429], [57.0129, 9.99426], [57.01304, 9.99425], [57.01321, 9.99426], [57.01357, 9.99427], [57.01413, 9.9943], [57.01462, 9.99432], [57.01501, 9.99436], [57.01522, 9.9944], [57.01556, 9.99448], [57.01572, 9.99452], [57.01615, 9.99465], [57.01661, 9.99473], [57.01748, 9.99479], [57.01794, 9.99484], [57.0185, 9.99488], [57.01857, 9.99486], [57.01868, 9.99483], [57.01869, 9.99483], [57.01879, 9.99478], [57.01897, 9.99471], [57.01903, 9.9947], [57.01909, 9.99473], [57.01909, 9.99473], [57.0191, 9.99475], [57.01911, 9.99478], [57.01912, 9.9948], [57.01914, 9.99482], [57.01915, 9.99484], [57.01916, 9.99485], [57.01918, 9.99486], [57.01919, 9.99488], [57.01923, 9.99489], [57.01926, 9.9949], [57.01927, 9.99491], [57.01929, 9.99491], [57.01931, 9.99491], [57.01933, 9.9949], [57.01936, 9.99489], [57.01938, 9.99488], [57.0194, 9.99487], [57.01944, 9.99482], [57.01946, 9.99479], [57.01949, 9.99475], [57.0195, 9.9947], [57.01952, 9.99465], [57.01953, 9.9946], [57.01954, 9.99454], [57.01955, 9.99448], [57.01955, 9.99443], [57.01955, 9.99437], [57.01954, 9.99431], [57.01954, 9.99426], [57.01952, 9.9942], [57.01951, 9.99415], [57.01949, 9.99411], [57.01947, 9.99406], [57.01944, 9.99403], [57.01941, 9.994], [57.01939, 9.99397], [57.01936, 9.99385], [57.01934, 9.99364], [57.01933, 9.99308], [57.01935, 9.99233], [57.01934, 9.99109], [57.01936, 9.98928], [57.01936, 9.98907], [57.01938, 9.98772], [57.01939, 9.98723], [57.01939, 9.98713], [57.0194, 9.98675], [57.01941, 9.98623], [57.01943, 9.98456], [57.01946, 9.98282], [57.01948, 9.98118], [57.01949, 9.98043], [57.0195, 9.97953], [57.01952, 9.97702], [57.01952, 9.9767], [57.01953, 9.97649], [57.01959, 9.97623], [57.01959, 9.97623], [57.01961, 9.9762], [57.01963, 9.97618], [57.01965, 9.97616], [57.01966, 9.97613], [57.01968, 9.97609], [57.01969, 9.97605], [57.0197, 9.97602], [57.01985, 9.97593], [57.02001, 9.97582], [57.02032, 9.97581], [57.02057, 9.97579], [57.02182, 9.97569], [57.02248, 9.97566], [57.02315, 9.97569], [57.02322, 9.97569], [57.02347, 9.97569], [57.0236, 9.9757], [57.02365, 9.97575], [57.02373, 9.97578], [57.02414, 9.97583], [57.02472, 9.97586], [57.02475, 9.97585], [57.02476, 9.97585], [57.02484, 9.97581], [57.02497, 9.97582], [57.02529, 9.97588], [57.02565, 9.97598], [57.0258, 9.976], [57.02693, 9.97622], [57.02835, 9.97654], [57.02882, 9.97665], [57.02956, 9.97683], [57.02963, 9.97694], [57.02991, 9.97702], [57.02991, 9.97702], [57.02999, 9.97695], [57.03011, 9.97698], [57.0303, 9.97701], [57.03041, 9.97689], [57.03048, 9.97543], [57.03049, 9.97525], [57.03051, 9.97511], [57.03051, 9.975], [57.03054, 9.97468], [57.03063, 9.97406], [57.03067, 9.97384], [57.03076, 9.9733], [57.03076, 9.97328], [57.03085, 9.9729], [57.03092, 9.97262], [57.03097, 9.97238], [57.03098, 9.97237], [57.03103, 9.97216], [57.03103, 9.97215], [57.03108, 9.97194], [57.03133, 9.97086], [57.03134, 9.97081], [57.03228, 9.96694], [57.03244, 9.96627], [57.03249, 9.966], [57.0325, 9.96599], [57.03257, 9.96567], [57.033, 9.96393], [57.03327, 9.96276], [57.0337, 9.96093], [57.03381, 9.96023], [57.03381, 9.96021], [57.03384, 9.95997], [57.0339, 9.95951], [57.03397, 9.95882], [57.03402, 9.95802], [57.03403, 9.95719], [57.03403, 9.95666], [57.03402, 9.95632], [57.03399, 9.95575], [57.03394, 9.95529], [57.03382, 9.95425], [57.03382, 9.95425], [57.03448, 9.95395], [57.03525, 9.95364], [57.03575, 9.95344], [57.03663, 9.95308], [57.03691, 9.95299], [57.03712, 9.95293], [57.03754, 9.95282], [57.03756, 9.95282], [57.03779, 9.95277], [57.03796, 9.95274], [57.03832, 9.95263], [57.03882, 9.95248], [57.03939, 9.95233], [57.04004, 9.95219], [57.04039, 9.95205], [57.04069, 9.95182], [57.04084, 9.9517], [57.04105, 9.95155], [57.04148, 9.95124], [57.04181, 9.95095], [57.04241, 9.95054], [57.04266, 9.95036], [57.04296, 9.95013], [57.04328, 9.9499], [57.04376, 9.9495], [57.04381, 9.94947], [57.04402, 9.94921], [57.04413, 9.94904], [57.04422, 9.94891], [57.04431, 9.94878], [57.0445, 9.94848], [57.0445, 9.94848], [57.0446, 9.94841], [57.04466, 9.9483], [57.04458, 9.94823], [57.04348, 9.94723], [57.04324, 9.94703], [57.0429, 9.94673], [57.0428, 9.94665], [57.04277, 9.94662], [57.04272, 9.94658], [57.04248, 9.94635], [57.04211, 9.94598], [57.04211, 9.94598], [57.04263, 9.94482], [57.04279, 9.9445], [57.04279, 9.9445], [57.04316, 9.94515], [57.04331, 9.94541], [57.04335, 9.94546], [57.04335, 9.94546], [57.04301, 9.94612]];


    // @Input() lat: number = 57.012048;
    // @Input() lon: number = 9.991264;
    @Input() lat: number = this.data[0][0];
    @Input() lon: number = this.data[0][1];
    @Input() zoom: number = 13;
    @Input() tiles: string = "http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png";
    @ViewChild('truckster_map') mapElement: ElementRef;

    @Input() latlngs: Array<Array<number>> = [];

    map = null;

    ngOnInit(){
        this.map = L.map(this.mapElement.nativeElement, {
            zoomControl: false,
            center: L.latLng(this.lat, this.lon),
            zoom: this.zoom,
            minZoom: 4,
            maxZoom: 19,
            layers: [],
            closePopupOnClick: false
        });

        L.tileLayer(this.tiles).addTo(this.map);


        let new_icon = L.icon({
            iconUrl: 'assets/images/Truck_Yellow.png',
            iconSize: [64, 64],
            iconAnchor: [32, 84],
        });

        var firstpolyline = new L.polyline(this.latlngs, null);
        var car = new L.marker([50.5, 30.5], {icon: new_icon});

        this.map.addLayer(firstpolyline);
        this.map.addLayer(car);


        Observable.interval(200).take(this.data.length).map((x) => x + 1).subscribe((x) => {
            let lat = this.data[x][0];
            let lon = this.data[x][1];

            let loc = L.latLng(lat, lon);

            car.setLatLng(loc);
            firstpolyline.addLatLng(loc);
        });
    }
}
